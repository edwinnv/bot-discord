import { s } from '@sapphire/shapeshift';
import { Locale } from 'discord-api-types/v10';
import { isValidationEnabled } from '../../util/validation.mjs';

const namePredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^[\p{Ll}\p{Lm}\p{Lo}\p{N}\p{sc=Devanagari}\p{sc=Thai}_-]+$/u).setValidationEnabled(isValidationEnabled);
function validateName(name) {
  namePredicate.parse(name);
}
const descriptionPredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);
const localePredicate = s.nativeEnum(Locale);
function validateDescription(description) {
  descriptionPredicate.parse(description);
}
const maxArrayLengthPredicate = s.unknown.array.lengthLessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
function validateLocale(locale) {
  return localePredicate.parse(locale);
}
function validateMaxOptionsLength(options) {
  maxArrayLengthPredicate.parse(options);
}
function validateRequiredParameters(name, description, options) {
  validateName(name);
  validateDescription(description);
  validateMaxOptionsLength(options);
}
const booleanPredicate = s.boolean;
function validateDefaultPermission(value) {
  booleanPredicate.parse(value);
}
function validateRequired(required) {
  booleanPredicate.parse(required);
}
const choicesLengthPredicate = s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
function validateChoicesLength(amountAdding, choices) {
  choicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);
}
function assertReturnOfBuilder(input, ExpectedInstanceOf) {
  s.instance(ExpectedInstanceOf).parse(input);
}
const localizationMapPredicate = s.object(Object.fromEntries(Object.values(Locale).map((locale) => [locale, s.string.nullish]))).strict.nullish.setValidationEnabled(isValidationEnabled);
function validateLocalizationMap(value) {
  localizationMapPredicate.parse(value);
}
const dmPermissionPredicate = s.boolean.nullish;
function validateDMPermission(value) {
  dmPermissionPredicate.parse(value);
}
const memberPermissionPredicate = s.union(s.bigint.transform((value) => value.toString()), s.number.safeInt.transform((value) => value.toString()), s.string.regex(/^\d+$/)).nullish;
function validateDefaultMemberPermissions(permissions) {
  return memberPermissionPredicate.parse(permissions);
}

export { assertReturnOfBuilder, localizationMapPredicate, validateChoicesLength, validateDMPermission, validateDefaultMemberPermissions, validateDefaultPermission, validateDescription, validateLocale, validateLocalizationMap, validateMaxOptionsLength, validateName, validateRequired, validateRequiredParameters };
//# sourceMappingURL=Assertions.mjs.map
