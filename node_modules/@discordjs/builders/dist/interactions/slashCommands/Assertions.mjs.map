{"version":3,"file":"Assertions.mjs","sources":["../../../src/interactions/slashCommands/Assertions.ts"],"sourcesContent":["import { s } from '@sapphire/shapeshift';\nimport { type APIApplicationCommandOptionChoice, Locale, LocalizationMap } from 'discord-api-types/v10';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder';\nimport type { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase';\nimport { isValidationEnabled } from '../../util/validation';\n\nconst namePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(32)\n\t.regex(/^[\\p{Ll}\\p{Lm}\\p{Lo}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}_-]+$/u)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nconst descriptionPredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(100)\n\t.setValidationEnabled(isValidationEnabled);\nconst localePredicate = s.nativeEnum(Locale);\n\nexport function validateDescription(description: unknown): asserts description is string {\n\tdescriptionPredicate.parse(description);\n}\n\nconst maxArrayLengthPredicate = s.unknown.array.lengthLessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nexport function validateLocale(locale: unknown) {\n\treturn localePredicate.parse(locale);\n}\n\nexport function validateMaxOptionsLength(options: unknown): asserts options is ToAPIApplicationCommandOptions[] {\n\tmaxArrayLengthPredicate.parse(options);\n}\n\nexport function validateRequiredParameters(\n\tname: string,\n\tdescription: string,\n\toptions: ToAPIApplicationCommandOptions[],\n) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert description conditions\n\tvalidateDescription(description);\n\n\t// Assert options conditions\n\tvalidateMaxOptionsLength(options);\n}\n\nconst booleanPredicate = s.boolean;\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateRequired(required: unknown): asserts required is boolean {\n\tbooleanPredicate.parse(required);\n}\n\nconst choicesLengthPredicate = s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\n\nexport function validateChoicesLength(amountAdding: number, choices?: APIApplicationCommandOptionChoice[]): void {\n\tchoicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);\n}\n\nexport function assertReturnOfBuilder<\n\tT extends ApplicationCommandOptionBase | SlashCommandSubcommandBuilder | SlashCommandSubcommandGroupBuilder,\n>(input: unknown, ExpectedInstanceOf: new () => T): asserts input is T {\n\ts.instance(ExpectedInstanceOf).parse(input);\n}\n\nexport const localizationMapPredicate = s\n\t.object<LocalizationMap>(Object.fromEntries(Object.values(Locale).map((locale) => [locale, s.string.nullish])))\n\t.strict.nullish.setValidationEnabled(isValidationEnabled);\n\nexport function validateLocalizationMap(value: unknown): asserts value is LocalizationMap {\n\tlocalizationMapPredicate.parse(value);\n}\n\nconst dmPermissionPredicate = s.boolean.nullish;\n\nexport function validateDMPermission(value: unknown): asserts value is boolean | null | undefined {\n\tdmPermissionPredicate.parse(value);\n}\n\nconst memberPermissionPredicate = s.union(\n\ts.bigint.transform((value) => value.toString()),\n\ts.number.safeInt.transform((value) => value.toString()),\n\ts.string.regex(/^\\d+$/),\n).nullish;\n\nexport function validateDefaultMemberPermissions(permissions: unknown) {\n\treturn memberPermissionPredicate.parse(permissions);\n}\n"],"names":[],"mappings":"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"}