import { validateName, validateType, validateDefaultPermission, validateDefaultMemberPermissions, validateDMPermission, validateRequiredParameters } from './Assertions.mjs';
import { validateLocale, validateLocalizationMap } from '../slashCommands/Assertions.mjs';

class ContextMenuCommandBuilder {
  constructor() {
    this.name = void 0;
    this.type = void 0;
    this.default_permission = void 0;
    this.default_member_permissions = void 0;
    this.dm_permission = void 0;
  }
  setName(name) {
    validateName(name);
    Reflect.set(this, "name", name);
    return this;
  }
  setType(type) {
    validateType(type);
    Reflect.set(this, "type", type);
    return this;
  }
  setDefaultPermission(value) {
    validateDefaultPermission(value);
    Reflect.set(this, "default_permission", value);
    return this;
  }
  setDefaultMemberPermissions(permissions) {
    const permissionValue = validateDefaultMemberPermissions(permissions);
    Reflect.set(this, "default_member_permissions", permissionValue);
    return this;
  }
  setDMPermission(enabled) {
    validateDMPermission(enabled);
    Reflect.set(this, "dm_permission", enabled);
    return this;
  }
  setNameLocalization(locale, localizedName) {
    if (!this.name_localizations) {
      Reflect.set(this, "name_localizations", {});
    }
    const parsedLocale = validateLocale(locale);
    if (localizedName === null) {
      this.name_localizations[parsedLocale] = null;
      return this;
    }
    validateName(localizedName);
    this.name_localizations[parsedLocale] = localizedName;
    return this;
  }
  setNameLocalizations(localizedNames) {
    if (localizedNames === null) {
      Reflect.set(this, "name_localizations", null);
      return this;
    }
    Reflect.set(this, "name_localizations", {});
    Object.entries(localizedNames).forEach((args) => this.setNameLocalization(...args));
    return this;
  }
  toJSON() {
    validateRequiredParameters(this.name, this.type);
    validateLocalizationMap(this.name_localizations);
    return { ...this };
  }
}

export { ContextMenuCommandBuilder };
//# sourceMappingURL=ContextMenuCommandBuilder.mjs.map
