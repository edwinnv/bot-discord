{"version":3,"file":"Assertions.cjs","sources":["../../../src/interactions/contextMenuCommands/Assertions.ts"],"sourcesContent":["import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandType } from 'discord-api-types/v10';\nimport type { ContextMenuCommandType } from './ContextMenuCommandBuilder';\nimport { isValidationEnabled } from '../../util/validation';\n\nconst namePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(32)\n\t.regex(/^( *[\\p{L}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}_-]+ *)+$/u)\n\t.setValidationEnabled(isValidationEnabled);\nconst typePredicate = s\n\t.union(s.literal(ApplicationCommandType.User), s.literal(ApplicationCommandType.Message))\n\t.setValidationEnabled(isValidationEnabled);\nconst booleanPredicate = s.boolean;\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nexport function validateType(type: unknown): asserts type is ContextMenuCommandType {\n\ttypePredicate.parse(type);\n}\n\nexport function validateRequiredParameters(name: string, type: number) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert type is valid\n\tvalidateType(type);\n}\n\nconst dmPermissionPredicate = s.boolean.nullish;\n\nexport function validateDMPermission(value: unknown): asserts value is boolean | null | undefined {\n\tdmPermissionPredicate.parse(value);\n}\n\nconst memberPermissionPredicate = s.union(\n\ts.bigint.transform((value) => value.toString()),\n\ts.number.safeInt.transform((value) => value.toString()),\n\ts.string.regex(/^\\d+$/),\n).nullish;\n\nexport function validateDefaultMemberPermissions(permissions: unknown) {\n\treturn memberPermissionPredicate.parse(permissions);\n}\n"],"names":["s","isValidationEnabled","ApplicationCommandType"],"mappings":";;;;;;;;AAGA,MAAM,aAAa,GAAGA,YAAC,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC,oBAAoB,CAACC,8BAAmB,CAAC,CAAC;AAC9L,MAAM,aAAa,GAAGD,YAAC,CAAC,KAAK,CAACA,YAAC,CAAC,OAAO,CAACE,0BAAsB,CAAC,IAAI,CAAC,EAAEF,YAAC,CAAC,OAAO,CAACE,0BAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAoB,CAACD,8BAAmB,CAAC,CAAC;AAC3J,MAAM,gBAAgB,GAAGD,YAAC,CAAC,OAAO,CAAC;AAC5B,SAAS,yBAAyB,CAAC,KAAK,EAAE;AACjD,EAAE,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAChC,CAAC;AACM,SAAS,YAAY,CAAC,IAAI,EAAE;AACnC,EAAE,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC;AACM,SAAS,YAAY,CAAC,IAAI,EAAE;AACnC,EAAE,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC;AACM,SAAS,0BAA0B,CAAC,IAAI,EAAE,IAAI,EAAE;AACvD,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;AACrB,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;AACrB,CAAC;AACD,MAAM,qBAAqB,GAAGA,YAAC,CAAC,OAAO,CAAC,OAAO,CAAC;AACzC,SAAS,oBAAoB,CAAC,KAAK,EAAE;AAC5C,EAAE,qBAAqB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACrC,CAAC;AACD,MAAM,yBAAyB,GAAGA,YAAC,CAAC,KAAK,CAACA,YAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAEA,YAAC,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAEA,YAAC,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;AAC9K,SAAS,gCAAgC,CAAC,WAAW,EAAE;AAC9D,EAAE,OAAO,yBAAyB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AACtD;;;;;;;;;"}