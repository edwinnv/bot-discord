import type { ApplicationCommandType, LocaleString, LocalizationMap, Permissions, RESTPostAPIApplicationCommandsJSONBody } from 'discord-api-types/v10';
export declare class ContextMenuCommandBuilder {
    /**
     * The name of this context menu command
     */
    readonly name: string;
    /**
     * The localized names for this command
     */
    readonly name_localizations?: LocalizationMap;
    /**
     * The type of this context menu command
     */
    readonly type: ContextMenuCommandType;
    /**
     * Whether the command is enabled by default when the app is added to a guild
     *
     * @deprecated This property is deprecated and will be removed in the future.
     * You should use `setDefaultMemberPermissions` or `setDMPermission` instead.
     */
    readonly default_permission: boolean | undefined;
    /**
     * Set of permissions represented as a bit set for the command
     */
    readonly default_member_permissions: Permissions | null | undefined;
    /**
     * Indicates whether the command is available in DMs with the application, only for globally-scoped commands.
     * By default, commands are visible.
     */
    readonly dm_permission: boolean | undefined;
    /**
     * Sets the name
     *
     * @param name - The name
     */
    setName(name: string): this;
    /**
     * Sets the type
     *
     * @param type - The type
     */
    setType(type: ContextMenuCommandType): this;
    /**
     * Sets whether the command is enabled by default when the application is added to a guild.
     *
     * **Note**: If set to `false`, you will have to later `PUT` the permissions for this command.
     *
     * @param value - Whether or not to enable this command by default
     *
     * @see https://discord.com/developers/docs/interactions/application-commands#permissions
     * @deprecated Use `setDefaultMemberPermissions` or `setDMPermission` instead.
     */
    setDefaultPermission(value: boolean): this;
    /**
     * Sets the default permissions a member should have in order to run the command.
     *
     * **Note:** You can set this to `'0'` to disable the command by default.
     *
     * @param permissions - The permissions bit field to set
     *
     * @see https://discord.com/developers/docs/interactions/application-commands#permissions
     */
    setDefaultMemberPermissions(permissions: Permissions | bigint | number | null | undefined): this;
    /**
     * Sets if the command is available in DMs with the application, only for globally-scoped commands.
     * By default, commands are visible.
     *
     * @param enabled - If the command should be enabled in DMs
     *
     * @see https://discord.com/developers/docs/interactions/application-commands#permissions
     */
    setDMPermission(enabled: boolean | null | undefined): this;
    /**
     * Sets a name localization
     *
     * @param locale - The locale to set a description for
     * @param localizedName - The localized description for the given locale
     */
    setNameLocalization(locale: LocaleString, localizedName: string | null): this;
    /**
     * Sets the name localizations
     *
     * @param localizedNames - The dictionary of localized descriptions to set
     */
    setNameLocalizations(localizedNames: LocalizationMap | null): this;
    /**
     * Returns the final data that should be sent to Discord.
     *
     * **Note:** Calling this function will validate required properties based on their conditions.
     */
    toJSON(): RESTPostAPIApplicationCommandsJSONBody;
}
export declare type ContextMenuCommandType = ApplicationCommandType.User | ApplicationCommandType.Message;
//# sourceMappingURL=ContextMenuCommandBuilder.d.ts.map