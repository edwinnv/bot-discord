import { ComponentType } from 'discord-api-types/v10';
import { SelectMenuOptionBuilder } from './SelectMenuOption.mjs';
import { normalizeArray } from '../../util/normalizeArray.mjs';
import { placeholderValidator, minMaxValidator, customIdValidator, disabledValidator, optionsLengthValidator, jsonOptionValidator, validateRequiredSelectMenuParameters } from '../Assertions.mjs';
import { ComponentBuilder } from '../Component.mjs';

class SelectMenuBuilder extends ComponentBuilder {
  constructor(data) {
    const { options, ...initData } = data ?? {};
    super({ type: ComponentType.SelectMenu, ...initData });
    this.options = options?.map((o) => new SelectMenuOptionBuilder(o)) ?? [];
  }
  setPlaceholder(placeholder) {
    this.data.placeholder = placeholderValidator.parse(placeholder);
    return this;
  }
  setMinValues(minValues) {
    this.data.min_values = minMaxValidator.parse(minValues);
    return this;
  }
  setMaxValues(maxValues) {
    this.data.max_values = minMaxValidator.parse(maxValues);
    return this;
  }
  setCustomId(customId) {
    this.data.custom_id = customIdValidator.parse(customId);
    return this;
  }
  setDisabled(disabled = true) {
    this.data.disabled = disabledValidator.parse(disabled);
    return this;
  }
  addOptions(...options) {
    options = normalizeArray(options);
    optionsLengthValidator.parse(this.options.length + options.length);
    this.options.push(...options.map((option) => option instanceof SelectMenuOptionBuilder ? option : new SelectMenuOptionBuilder(jsonOptionValidator.parse(option))));
    return this;
  }
  setOptions(...options) {
    options = normalizeArray(options);
    optionsLengthValidator.parse(options.length);
    this.options.splice(0, this.options.length, ...options.map((option) => option instanceof SelectMenuOptionBuilder ? option : new SelectMenuOptionBuilder(jsonOptionValidator.parse(option))));
    return this;
  }
  toJSON() {
    validateRequiredSelectMenuParameters(this.options, this.data.custom_id);
    return {
      ...this.data,
      options: this.options.map((o) => o.toJSON())
    };
  }
}

export { SelectMenuBuilder };
//# sourceMappingURL=SelectMenu.mjs.map
