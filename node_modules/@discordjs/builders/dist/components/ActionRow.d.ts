import { type APIActionRowComponent, APIMessageActionRowComponent, APIModalActionRowComponent, APIActionRowComponentTypes } from 'discord-api-types/v10';
import { ComponentBuilder } from './Component';
import type { ButtonBuilder } from './button/Button';
import type { SelectMenuBuilder } from './selectMenu/SelectMenu';
import type { TextInputBuilder } from './textInput/TextInput';
import { type RestOrArray } from '../util/normalizeArray';
export declare type MessageComponentBuilder = MessageActionRowComponentBuilder | ActionRowBuilder<MessageActionRowComponentBuilder>;
export declare type ModalComponentBuilder = ModalActionRowComponentBuilder | ActionRowBuilder<ModalActionRowComponentBuilder>;
export declare type MessageActionRowComponentBuilder = ButtonBuilder | SelectMenuBuilder;
export declare type ModalActionRowComponentBuilder = TextInputBuilder;
export declare type AnyComponentBuilder = MessageActionRowComponentBuilder | ModalActionRowComponentBuilder;
/**
 * Represents an action row component
 */
export declare class ActionRowBuilder<T extends AnyComponentBuilder> extends ComponentBuilder<APIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>> {
    /**
     * The components within this action row
     */
    readonly components: T[];
    constructor({ components, ...data }?: Partial<APIActionRowComponent<APIActionRowComponentTypes>>);
    /**
     * Adds components to this action row.
     *
     * @param components - The components to add to this action row.
     */
    addComponents(...components: RestOrArray<T>): this;
    /**
     * Sets the components in this action row
     *
     * @param components - The components to set this row to
     */
    setComponents(...components: RestOrArray<T>): this;
    toJSON(): APIActionRowComponent<ReturnType<T['toJSON']>>;
}
//# sourceMappingURL=ActionRow.d.ts.map