import { ComponentType, type TextInputStyle, type APITextInputComponent } from 'discord-api-types/v10';
import { type JSONEncodable } from '../../util/jsonEncodable';
import { ComponentBuilder } from '../Component';
export declare class TextInputBuilder extends ComponentBuilder<APITextInputComponent> {
    constructor(data?: APITextInputComponent & {
        type?: ComponentType.TextInput;
    });
    /**
     * Sets the custom id for this text input
     *
     * @param customId - The custom id of this text input
     */
    setCustomId(customId: string): this;
    /**
     * Sets the label for this text input
     *
     * @param label - The label for this text input
     */
    setLabel(label: string): this;
    /**
     * Sets the style for this text input
     *
     * @param style - The style for this text input
     */
    setStyle(style: TextInputStyle): this;
    /**
     * Sets the minimum length of text for this text input
     *
     * @param minLength - The minimum length of text for this text input
     */
    setMinLength(minLength: number): this;
    /**
     * Sets the maximum length of text for this text input
     *
     * @param maxLength - The maximum length of text for this text input
     */
    setMaxLength(maxLength: number): this;
    /**
     * Sets the placeholder of this text input
     *
     * @param placeholder - The placeholder of this text input
     */
    setPlaceholder(placeholder: string): this;
    /**
     * Sets the value of this text input
     *
     * @param value - The value for this text input
     */
    setValue(value: string): this;
    /**
     * Sets whether this text input is required
     *
     * @param required - Whether this text input is required
     */
    setRequired(required?: boolean): this;
    toJSON(): APITextInputComponent;
    equals(other: JSONEncodable<APITextInputComponent> | APITextInputComponent): boolean;
}
//# sourceMappingURL=TextInput.d.ts.map